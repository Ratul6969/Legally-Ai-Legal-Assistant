import streamlit as st
import pandas as pd
import os
from test import process_legal_query
import hashlib

# Configure page settings
st.set_page_config(
    page_title="Legally - AI Legal Assistant",
    page_icon="‚öñÔ∏è",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# Feedback storage file
FEEDBACK_FILE = "feedback.csv"

def save_feedback(question, response, feedback_text, rating):
    """Save user feedback to a CSV file."""
    feedback_data = pd.DataFrame([{"Question": question, "Response": response, "Feedback": feedback_text, "Rating": rating}])
    
    if os.path.exists(FEEDBACK_FILE):
        feedback_data.to_csv(FEEDBACK_FILE, mode='a', header=False, index=False)
    else:
        feedback_data.to_csv(FEEDBACK_FILE, mode='w', header=True, index=False)

# Initialize session state
if "conversation_history" not in st.session_state:
    st.session_state.conversation_history = []
if "response_cache" not in st.session_state:
    st.session_state.response_cache = {}

# Chat interface
st.title("‚öñÔ∏è Legally - AI Legal Assistant")
st.subheader("‡¶Ü‡¶á‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶π‡¶æ‡¶§‡ßá‡¶∞ ‡¶Æ‡ßÅ‡¶†‡ßã‡ßü‡•§")

# User input
with st.form(key='chat_form'):
    user_input = st.text_input("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:", "")
    submitted = st.form_submit_button("‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶™‡¶æ‡¶®")

if submitted and user_input:
    if user_input in st.session_state.response_cache:
        response = st.session_state.response_cache[user_input]
    else:
        with st.spinner('‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...'):
            response = process_legal_query(user_input)
            st.session_state.response_cache[user_input] = response
    
    st.session_state.conversation_history.append({"question": user_input, "response": response})

# Display conversation history
if st.session_state.conversation_history:
    for chat in reversed(st.session_state.conversation_history):
        
        st.markdown(f"**‡¶Ü‡¶™‡¶®‡¶ø:** {chat['question']}")
        st.markdown(f"**Legally:** {chat['response']}")
        
        
        # Generate unique keys for feedback widgets by hashing the question
        unique_key = hashlib.md5(chat['question'].encode('utf-8')).hexdigest()

        # Feedback section
        with st.expander("üîÑ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶¶‡¶ø‡¶®"):
            rating = st.radio("‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶ï‡ßá‡¶Æ‡¶® ‡¶õ‡¶ø‡¶≤?", ["‡¶≠‡¶æ‡¶≤", "‡¶ó‡¶°‡¶º", "‡¶¶‡ßÅ‡¶∞‡ßç‡¶¨‡¶≤"], key=f"rating_{unique_key}")
            feedback_text = st.text_area("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï):", key=f"feedback_{unique_key}")
            if st.button("‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶£", key=f"submit_feedback_{unique_key}"):
                save_feedback(chat['question'], chat['response'], feedback_text, rating)
                st.success("‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

if __name__ == "__main__":
    st.write("\n")
